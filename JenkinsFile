#!groovy
pipeline {
    agent any
    
    environment {
        def owner         = "nginx"                                   // 网站程序权限
        def deploy_dir    = "/app/webroot"                            // 远程主机的网站目录
        def bak_dir       = "/app/backup/php/${project}"              // 远程主机的备份文件存放目录,此$project 在options 参数里配置添加。
        def credentialsId = "299d9d55-0dc7-4917-b6ed-4896a8637a46"    // jenkins中，拉取代码的凭证ID
        def receiver      = "yangjingwen@pxjy.com"                    // 邮箱收件人，可以用逗号分开，写多个收件人
        def check_url     = "http://${deploy_ip}/index.html"          // 该URL 为检测web服务可用性的接口路径，若有不同的url，需要新增定义变量，检测模块里，稍加修改
        
        //考虑到线上发版的时候是禁止root登陆的，因此发布代码时用的是程序用户
        //$rollback_version                                           为字符参数中的配置的变量 
        //$JOB_NAME                                                   为jenkins中workspace里的项目目录名称
        //$bak_dir                                                    预先创建目录并授权为nginx身份
        //建立jenkins服务器与远端服务器程序用户的单向免交互
        //此配置，构建执行前，修改配置"备份代码-->发版代码-->回滚代码"模块下，需要过滤的缓存日志目录，避免再次构建时，清理掉线上的程序缓存日志。
    }

    options {
        timestamps()                                                  // 输出构建的时间信息
        disableConcurrentBuilds()                                     // 不允许同时执行流水线，被用来防止同时访问共享资源等
        timeout(time: 20, unit: 'MINUTES')                            // 设置流水线运行的超过20分钟，Jenkins将中止流水线
        buildDiscarder(logRotator(numToKeepStr: '20'))                // 表示保留20次构建历史
    }

    parameters {
    	choice(name: 'deploy_ip', choices: ['test', '192.168.10.25','192.168.10.26'], description: '请选择将要发布或回滚的主机')
    	choice(name: 'project', choices: ['test', 'demo'], description: '请选择将要发布或回滚的项目')
        string(name: 'coding_url', defaultValue: 'git@e.coding.net:pxjyteam/demo/php.git', description: '请输入将要发布的项目代码路径')
        string(name: 'branch', defaultValue: 'master', description: '请输入将要构建的代码分支')
        choice(name: 'MODE', choices: ['deploy','rollback'], description: '请选择发布或者回滚')
        string(name: 'rollback_version', defaultValue: '0', description: '请选择将要回滚的版本号')
    }
    
    stages {   
        stage('拉取代码'){
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
            	script {
                	try {
                		echo "拉取PHP项目代码：${JOB_NAME}"
                		checkout([
                			$class: 'GitSCM',
                			branches: [[name: "${branch}"]],
                    		doGenerateSubmoduleConfigurations: false,
                    		extensions: [],
                    		submoduleCfg: [],
                    		userRemoteConfigs: [[credentialsId: "${credentialsId}", url: "${coding_url}"]]
                		])
                	} catch (err) {
                		echo "$err"
                	}
                }
            }
        }
                
        stage('部署') {
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
            	script {
                	try {
            			//线上代码备份时：配置过滤的目录，排除线上缓存的日志，根据不同的项目，配置过滤目录，一是节省空间，二是审计会用。 eg: --exclude=Runtime or  --exclude=file1
                		echo  "部署应用服务器IP： ${deploy_ip}"
                		echo  "开始备份PHP项目代码"
                		sh 'ssh ${owner}@${deploy_ip} "cd ${deploy_dir} 			\
                    		&& [ -d "${project}" ]									\
                    		&& chown -R ${owner} ${deploy_dir}						\
                    		&& tar zcf ${project}.tgz ${project} --exclude=Runtime	\
                    		&& mkdir -p ${bak_dir}/${BUILD_ID}						\
                    		&& mv ${project}.tgz  ${bak_dir}/${BUILD_ID}			\
                    		|| echo "${project}项目不存在，并且已经重新创建完成"   	   \
                    		&& mkdir -p ${deploy_dir}/${project}"'
                        
                		//线上代码发版时，配置过滤的目录，保留线上正在使用的缓存日志，同上。 eg: --exclude=Runtime or  --exclude=file1
                		echo  "升级最新代码"
                		sh 'rsync -e "ssh -p22" -avz --exclude=Runtime --exclude=.git --delete ${WORKSPACE}/  ${owner}@"${deploy_ip}":${deploy_dir}/${project}/'
                		sh 'ssh ${owner}@"${deploy_ip}" "chown -R  ${owner} ${deploy_dir}/${project}"'
                	} catch (err) {
                		echo "$err"
                	}
                }
            }
        }
        
        stage('回滚') {
            when {
                environment name: 'MODE',value: 'rollback'
            }
            steps {
            	script {
                	try {
            			echo "回滚应用服务器IP： ${deploy_ip}"
            			echo "开始回滚代码"
                		echo "回滚项目:   ${JOB_NAME}"
                		echo "回滚版本号: ${rollback_version}"
            			sh   '''
            				ssh ${owner}@${deploy_ip} "ls -h --full ${bak_dir}/${rollback_version}"
                			if [ $? -eq 0 ];then
                				#线上代码回滚时，配置过滤的目录，保留线上正在使用的缓存日志，同上。 eg: --exclude=Runtime or  --exclude=file1
                				ssh ${owner}@${deploy_ip} "cd ${bak_dir}/${rollback_version} && tar xf ${project}.tgz  &&  rsync -avz --exclude=Runtime --delete ${project}  ${deploy_dir}"
                				ssh ${owner}@${deploy_ip} "cd ${bak_dir}/${rollback_version} &&  rm  -rf ${project} &&  chown -R  ${owner}  ${deploy_dir}/${project}"
                			fi
                		'''
                    } catch (err) {
                		echo "$err"
                	}
                }
            }
        }
        
        stage('检测服务') {
            steps {
            	script {
                    echo "检查项目接口服务： $check_url"
                    def update_status = sh script: "wget --spider $check_url"
                    if (update_status == 0) {
                        skip = '0'
                        return 
                    }
                }
            }
        }
    }
    
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
