pipeline {
    agent any
    environment {
        // 定义web项目目录名称
        def project    = "demo"
        //jenkins-workspace中的项目名称
        def ITEMNAME   = "${JOB_NAME}"
        // 远程主机地址，这里只演示了一台，如果是多台，可以空格继续写，下边的部署嵌套个for循环即可
        def remote_ip  = "192.168.10.25"
        def remote_dir = "/app/webroot"
        //$rollback_version 为字符参数中的配置的变量
    }

    // 这里使用参数化构建的方式，而没有使用input参数，下边会说明一下原因。
    parameters {
        choice(name: 'MODE', choices: ['deploy','rollback'], description: '请选择发布或者回滚？')
    }
    stages {   
        stage('拉取代码'){
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                echo "checkout from ${ITEMNAME}"
                git url: ' git@github.com:yangsirs/demo.git', branch: 'master'
            }
        }
        
        stage('目录检查') {
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                echo "检查${remote_dir}目录是否存在"
                script{
                    def resultUpdateshell = sh script: 'ls ${remote_dir}'
                    if (resultUpdateshell == 0) {
                        skip = '0'
                        return
                    }   
                }
            }
        }

        stage('发布确认') {
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                input "检查完成，是否发布?"
            }
        }
        
        stage('回滚确认') {
            when {
                environment name: 'MODE',value: 'rollback'
            }
            steps {
                input "检查完成，是否回滚?"
            }
        }
        
        stage('部署') {
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                script {
                    try {
                        sh '''
                            mkdir -p /app/backup/${project}/${BUILD_ID}
                            cd ${remote_dir} && tar zcf ${project}.tgz ${project}  &&  mv ${project}.tgz /app/backup/${project}/${BUILD_ID}
                            
                            rsync -avz --exclude='JenkinsFile' --exclude=.git --delete ${WORKSPACE}  ${remote_dir}
                            chown -R  nginx.nginx ${remote_dir}/${project}
                        '''
                    } catch(err) {
                        echo "${err}"
                    }
                }
            }
        }
        stage('回滚') {
            when {
                environment name: 'MODE',value: 'rollback'
            }
            steps {
                script {
                    try {
                        sh '''
                            cd    /app/backup/${project}/${rollback_version}  && tar xf ${project}.tgz
                            rsync -avz --delete ${project}    ${remote_dir}
                            rm    -rf ${project}  &&  chown -R  nginx.nginx  ${remote_dir}/${project}
                        '''
                    } catch(err) {
                        echo "${err}"
                    }
                }
            }
        }
    }
}
