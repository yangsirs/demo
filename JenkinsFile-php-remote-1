pipeline {
    agent any
    
    environment {
        def project    = "demo"                    // 定义主机中web项目目录名称
        def remote_ip  = "192.168.10.26"           // 远程主机地址，这里只演示了一台，如果是多台，可以空格继续写
        def remote_dir = "/app/webroot"            // 远程主机的网站目录
        def bak_dir    = "/app/backup/${project}"  // 远程主机的备份文件存放目录
        
        //$rollback_version 为字符参数中的配置的变量
        //$JOB_NAME         为jenkins中workspace里的项目目录名称
    }

    // 这里使用参数化构建的方式，而没有使用input参数，下边会说明一下原因。
    parameters {
        choice(name: 'MODE', choices: ['deploy','rollback'], description: '请选择发布或者回滚？')
    }
    
    stages {   
        stage('拉取代码'){
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                echo "Checkout from ${JOB_NAME}"
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '299d9d55-0dc7-4917-b6ed-4896a8637a46', url: 'git@github.com:yangsirs/demo.git']]])
            }
        }
        
        stage('目录检查') {
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                echo "检查${remote_dir}目录是否存在"
                script{
                    def resultUpdateshell = sh script: 'sshpass -p admin  ssh root@${remote_ip} "ls ${remote_dir}"'
                    if (resultUpdateshell == 0) {
                        skip = '0'
                        return
                    }
                }
            }
        }

        stage('发布确认') {
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                input "检查完成，是否发布?"
            }
        }
                
        stage('部署') {
            when {
                environment name: 'MODE',value: 'deploy'
            }
            steps {
                script {
                    try {
                        sh '''
                            sshpass -p admin  ssh root@${remote_ip} "mkdir -p  ${bak_dir}/${BUILD_ID}  \
                                &&  cd  ${remote_dir}  &&  tar zcf  ${project}.tgz ${project}          \
                                &&  mv  ${project}.tgz  ${bak_dir}/${BUILD_ID}"
                            
                            rsync -avz -e 'ssh -p 22' --exclude='JenkinsFile-php-remote' --exclude=.git --delete ${WORKSPACE}  root@${remote_ip}:{remote_dir} 
                            sshpass -p admin  ssh root@${remote_ip} "chown -R  nginx.nginx ${remote_dir}/${project}"
                        '''
                    } catch(err) {
                        echo "${err}"
                    }
                }
            }
        }
        
        stage('回滚确认') {
            when {
                environment name: 'MODE',value: 'rollback'
            }
            steps {
                input "检查完成，是否回滚?"
            }
        }
        
        stage('回滚') {
            when {
                environment name: 'MODE',value: 'rollback'
            }
            steps {
                script {
                    try {
                        sh '''
                            sshpass -p admin  ssh root@${remote_ip} "cd ${bak_dir}/${rollback_version}     \
                              &&  tar xf ${project}.tgz  &&  rsync -avz --delete ${project}  ${remote_dir} \
                              &&  rm   -rf ${project} &&  chown -R  nginx.nginx  ${remote_dir}/${project}"
                        '''
                    } catch(err) {
                        echo "${err}"
                    }
                }
            }
        }
    }
    post {
        success {
            echo "I'm succeeeded !"
        }
        failure {
            echo "I'm Failed !"
            mail to: 'yangjingwen@pxjy.com,18701693001@163.com',
            subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
            body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}
